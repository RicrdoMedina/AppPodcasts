{"version":3,"file":"0.0579a46deb699e6f505c.hot-update.js","sources":["webpack:///components/PostcastPlayer.js","webpack:///pages/channel.js"],"sourcesContent":["export default class PodcastPlayer extends React.Component {\r\n  render () {\r\n    \r\n    const { clip, onClose } = this.props\r\n\r\n    return <div className='clip'>\r\n      <nav>\r\n        { onClose ?\r\n        <a onClick = { onClose }>Volver</a>\r\n        :\r\n        <Link href={`/channel?id=${clip.channel.id}`}>\r\n          <a className='close'>&lt; Volver</a>\r\n        </Link>\r\n        }\r\n      </nav>\r\n\r\n      <picture>\r\n        <div style={{ backgroundImage: `url(${clip.urls.image || clip.channel.urls.logo_image.original})` }} />\r\n      </picture>\r\n\r\n      <div className='player'>\r\n        <h3>{ clip.title }</h3>\r\n        <h6>{ clip.channel.title }</h6>\r\n        <audio controls autoPlay={true}>\r\n          <source src={clip.urls.high_mp3} type='audio/mpeg' />\r\n        </audio>\r\n      </div>\r\n\r\n      <style jsx>{`\r\n        nav {\r\n          background: none;\r\n        }\r\n        nav a {\r\n          display: inline-block;\r\n          padding: 15px;\r\n          color: white;\r\n          cursor: pointer;\r\n          text-decoration: none;\r\n        }\r\n        .clip {\r\n          display: flex;\r\n          height: 100%;\r\n          flex-direction: column;\r\n          background: #8756ca;\r\n          color: white;\r\n        }\r\n        picture {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          flex: 1 1;\r\n          flex-direction: column;\r\n          width: auto;\r\n          padding: 10%;\r\n        }\r\n        picture div {\r\n          width: 100%;\r\n          height: 100%;\r\n          background-position: 50% 50%;\r\n          background-size: contain;\r\n          background-repeat: no-repeat;\r\n        }\r\n        .player {\r\n          padding: 30px;\r\n          background: rgba(0,0,0,0.3);\r\n          text-align: center;\r\n        }\r\n        h3 {\r\n          margin: 0;\r\n        }\r\n        h6 {\r\n          margin: 0;\r\n          margin-top: 1em;\r\n        }\r\n        audio {\r\n          margin-top: 2em;\r\n          width: 100%;\r\n        }\r\n\r\n        .modal {\r\n          position: fixed;\r\n          top: 0;\r\n          left: 0;\r\n          right: 0;\r\n          bottom: 0;\r\n          z-index: 99999;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// components/PostcastPlayer.js","import 'isomorphic-fetch'\nimport Layout from '../components/Layout'\nimport ChannelGrid from '../components/ChannelGrid'\nimport PodcastListWithClick from '../components/PodcastListWithClick'\nimport Error from './_error'\nimport PodcastPlayer from '../components/PostcastPlayer'\n\nexport default class extends React.Component {\n\n  constructor ( props ) {\n    super( props )\n    this.state = { openPostcast: null }\n  }\n\n  static async getInitialProps({ query, res }) {\n    let idChannel = query.id\n\n    try {\n      let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ])\n\n      if( reqChannel.status >= 400 ) {\n        res.statusCode = reqChannel.status\n        return { channel: null, audioClips: null, series: null, statusCode: reqChannel.status }\n      }\n\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel\n\n      let dataAudios = await reqAudios.json()\n      let audioClips = dataAudios.body.audio_clips\n\n      let dataSeries = await reqSeries.json()\n      let series = dataSeries.body.channels\n\n      return { channel, audioClips, series, statusCode: 200 }\n    } catch(e) {\n      return { channel: null, audioClips: null, series: null, statusCode: 503 }\n    }\n  }\n\n  openPostcast = (event, podcast) => {\n    event.preventDefault()\n    this.setState({ \n      openPostcast: podcast\n    })\n  }\n\n  render() {\n\n    const { channel, audioClips, series, statusCode } = this.props\n    const { openPostcast } = this.state\n\n    if( statusCode !== 200 ) {\n      return <Error statusCode={ statusCode } />\n    }\n\n    return <Layout title={channel.title}>\n    \n      <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n\n      { openPostcast && <div> Hay un podcast abierto </div> }\n\n      <h1>{ channel.title }</h1>\n\n      { series.length > 0 &&\n        <div>\n          <h2>Series</h2>\n          <ChannelGrid channels={ series } />\n        </div>\n      }\n\n      <h2>Ultimos Podcasts</h2>\n      <PodcastListWithClick\n        podcasts = { audioClips }\n        onClickPodcast = { this.openPostcast }\n      />\n\n      <style jsx>{`\n        .banner {\n          width: 100%;\n          padding-bottom: 25%;\n          background-position: 50% 50%;\n          background-size: cover;\n          background-color: #aaa;\n        }\n        h1 {\n          font-weight: 600;\n          padding: 15px;\n        }\n        h2 {\n          padding: 15px;\n          font-size: 1.2em;\n          font-weight: 600;\n          margin: 0;\n        }\n      `}</style>\n    </Layout>\n  }\n}\n\n\n// WEBPACK FOOTER //\n// pages/channel.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAoFA;;;;AAzFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAoCA;AACA;AAAA;AACA;AADA;AAGA;AAxCA;AAEA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAsCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAyCA;;;;;;;;;;;;;AAvFA;AACA;;;AAGA;AACA;;;;AADA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;;AADA;AACA;;AAEA;AACA;;AADA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAlCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}